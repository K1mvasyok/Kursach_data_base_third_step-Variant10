import pandas as pd
import io
from datetime import datetime 

from aiogram import F, Router
from aiogram.types import Message, BufferedInputFile
from aiogram import types
from aiogram.filters import CommandStart

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import app.keyboards as kb

from app.database.requests import get_disciplines_by_semester, get_educational_plan, get_faculties_for_id, delete_faculty_from_db, save_faculty_to_db, update_faculty_name, update_faculty_dean, get_specialization_by_id 

router_u = Router()

class AddNewFaculty(StatesGroup):
    faculty_name = State()
    faculty_dean_name = State()

class EditFaculty(StatesGroup):
    name = State()
    dean = State()
    faculty_id = State()

@router_u.message(CommandStart())
async def Cmd_start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç üëãüèº,\n–Ø - —á–∞—Ç-–±–æ—Ç –¥–∏—Ä–µ–∫—Ü–∏–∏\n\n'
                             f'–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å: \n\n'
                             f'‚Ä¢ –°–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ–º—É —Å–µ–º–µ—Å—Ç—Ä—É \n\n'  
                             f'‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω)\n\n'
                             f'‚Ä¢ –í–≤–µ–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤\n\n'                            
                             # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–ò–∑–º–µ–Ω–µ–Ω–∏–µ/–£–¥–∞–ª–µ–Ω–∏–µ
                             f'‚Ä¢ –í–≤–µ–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π')
    await message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu())
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
@router_u.message(F.text == 'üìñ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã')
async def Discipline(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:', reply_markup=await kb.semesters_for_practices())

@router_u.callback_query(F.data.startswith("practices_semester:"))
async def show_disciplines_by_semester(query: types.CallbackQuery):
    semester = int(query.data.split(":")[1])
    disciplines = await get_disciplines_by_semester(semester) 
    discipline_info = [f'{discipline[0].name} –¥–ª—è {discipline[0].specialization.code}' for discipline in disciplines]
    await query.message.answer(f'–°–µ–º–µ—Å—Ç—Ä: {semester}\n\n–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n{", ".join(discipline_info)}', reply_markup=await kb.return_to_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω   
@router_u.message(F.text == 'üìÖ –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω')
async def Educational_plan(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω:', reply_markup=await kb.specialties())

@router_u.callback_query(F.data.startswith("specialty_for_education:"))
async def Educational_plan_handler(query: types.CallbackQuery):
    specialty_id = int(query.data.split(":")[1])
    await educational_plan_for_specialty(query.message, specialty_id)

async def educational_plan_for_specialty(message, specialty_id):
    try:
        educational_plan = await get_educational_plan(specialty_id)
        if educational_plan:
            # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞
            df = pd.DataFrame([
                {
                    "Semester": discipline.semester,
                    "Discipline_Name": discipline.name,
                    "Assessment_type": discipline.assessment_type,
                    "Hours": discipline.hours,
                } for discipline in educational_plan
            ], columns=["Semester", "Discipline_Name", "Assessment_type", "Hours"])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            header_df = pd.DataFrame([{"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞": current_date}])
            df = pd.concat([header_df, df], ignore_index=True)

            excel_content = io.BytesIO()
            with pd.ExcelWriter(excel_content, engine="xlsxwriter") as writer:
                df.to_excel(writer, sheet_name="Sheet1", index=False)
                worksheet = writer.sheets["Sheet1"]
                # –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ —à–∏—Ä–∏–Ω–µ –¥–∞–Ω–Ω—ã—Ö
                for i, col in enumerate(df.columns):
                    max_len = df[col].astype(str).apply(len).max()
                    worksheet.set_column(i, i, max_len + 2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª 
            input_file = BufferedInputFile(excel_content.getvalue(), filename="educational_plan.xlsx")
            await message.answer_document(input_file, caption="–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω")
        else:
            await message.answer(f"–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å ID {specialty_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {e}")
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ò–Ω—Å—Ç–∏—Ç—É—Ç—ã    
@router_u.message(F.text == 'üéì –ò–Ω—Å—Ç–∏—Ç—É—Ç—ã')
async def Faculties(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', reply_markup=await kb.faculties())

@router_u.callback_query(F.data.startswith("action.faculties_start:"))
async def Faculties_start(query: types.CallbackQuery):
    faculties_id = int(query.data.split(":")[1])
    faculties = await get_faculties_for_id(faculties_id)
    await query.message.answer(f'–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {faculties.name}\n\n–î–∏—Ä–µ–∫—Ç–æ—Ä: {faculties.dean_name}\n\n', reply_markup= await kb.faculties_keyboard_act(faculties_id))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
@router_u.callback_query(F.data.startswith("action.faculties.add_"))
async def Faculties_add(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer(f'–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞:')
    await state.set_state(AddNewFaculty.faculty_name) 

@router_u.message(AddNewFaculty.faculty_name)
async def Process_new_faculty(message: Message, state: FSMContext):
    await state.update_data(faculty_name=message.text)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞:')
    await state.set_state(AddNewFaculty.faculty_dean_name) 

@router_u.message(AddNewFaculty.faculty_dean_name)
async def Process_new_faculty(message: Message, state: FSMContext):
    await state.update_data(faculty_dean_name=message.text)
    data = await state.get_data()
    
    faculty_name = data['faculty_name']
    faculty_dean_name = data['faculty_dean_name']

    faculty_data = {
        'name': faculty_name,
        'dean_name': faculty_dean_name,
    }
    
    faculty_id = await save_faculty_to_db(faculty_data)
    if faculty_id is not True:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    await message.answer(f'–ù–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω:\n\n'
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ: {faculty_data["name"]}\n'
                         f'–î–∏—Ä–µ–∫—Ç–æ—Ä: {faculty_data["dean_name"]}\n', reply_markup=await kb.return_to_menu())
    await state.clear()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
@router_u.callback_query(F.data.startswith("action.faculties.editstart_"))
async def Faculties_edit(query: types.CallbackQuery):
    faculties_id = int(query.data.split("_")[1])
    await query.message.answer(f'–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=await kb.faculties_keyboard_act_edit(faculties_id))    

@router_u.callback_query(F.data.startswith("action.faculties.editname_"))
async def Faculties_edit_name(query: types.CallbackQuery, state: FSMContext):
    faculty_id = int(query.data.split("_")[1])
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞:")
    await state.update_data(faculty_id=faculty_id)
    await state.set_state(EditFaculty.name)

@router_u.message(EditFaculty.name)
async def process_edit_name(message: Message, state: FSMContext):
    data = await state.get_data()
    faculty_id = data.get('faculty_id')
    new_name = message.text
    await update_faculty_name(faculty_id, new_name)
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}')
    await state.clear()

@router_u.callback_query(F.data.startswith("action.faculties.editdean_"))
async def Faculties_edit_dean(query: types.CallbackQuery, state: FSMContext):
    faculty_id = int(query.data.split("_")[1])
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–µ–∫–∞–Ω–∞:")
    await state.update_data(faculty_id=faculty_id)
    await state.set_state(EditFaculty.dean)
    
@router_u.message(EditFaculty.dean)
async def process_edit_dean(message: Message, state: FSMContext):
    data = await state.get_data()
    faculty_id = data.get('faculty_id')
    new_dean = message.text
    await update_faculty_dean(faculty_id, new_dean)
    await message.answer(f'–ò–º—è –¥–µ–∫–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_dean}')
    await state.clear()
    
# –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
@router_u.callback_query(F.data.startswith("action.faculties.delete_"))
async def Faculties_delete(query: types.CallbackQuery):
    faculties_id = int(query.data.split("_")[1])
    result = await delete_faculty_from_db(faculties_id)
    if result is not False:
        await query.message.answer(f"–ò–Ω—Å—Ç–∏—Ç—É—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
    else:
        await query.message.answer(f"–û—à–∏–±–∫–∞: –∏–Ω—Å—Ç–∏—Ç—É—Ç –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏     
@router_u.message(F.text == 'üìö –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')
async def Specialization(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', reply_markup=await kb.specialties_all())

@router_u.callback_query(F.data.startswith("action.specialtystart:"))
async def Specialization_act(query: types.CallbackQuery):
    specialization_id = int(query.data.split(":")[1])
    specialization = await get_specialization_by_id(specialization_id)
    if specialization:
        details_message = (
            f'–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n'
            f'–ù–∞–∑–≤–∞–Ω–∏–µ: {specialization.code}\n'
            f'–î–∏—Ä–µ–∫—Ç–æ—Ä: {specialization.name}\n'
            f'ID –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞: {specialization.faculty_id}'
        )
        await query.message.answer(details_message, reply_markup=await kb.faculties_keyboard_act(specialization.faculty_id))
    else:
        await query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.")


@router_u.callback_query(F.data.startswith("return_to_menu"))
async def Return_to_menu(query: types.CallbackQuery):
    await query.message.answer('üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu())